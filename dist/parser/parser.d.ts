import type { Bosses, BossesKilled, Collections, Floors, FloorsCompleted, ItemsCollected, MiniBosses, MiniBossesKilled, Secrets, SecretsUnlocked, SettingsType } from './types.js';
export declare class SaveParser {
    #private;
    private encryptedSecretsData;
    private keyboardLayoutSettings;
    private leftyFlipSettings;
    private keyboardLayoutSettings2;
    private momKillsCount;
    private poopDestoyedCount;
    private donationMachineUsageCount;
    private deathCardUsageCount;
    private arcadeEntrancesCount;
    private bombsPlacedCount;
    private deathsCount;
    private rocksDestroyedCount;
    private xRocksDestoyedCount;
    private bossOfTheCathedralKillsCount;
    private itemsCollected;
    private secretsUnlocked;
    private bossesKilled;
    private miniBossesKilled;
    private floorsCompleted;
    constructor();
    parse(input: string): Record<string, string>;
    getKeyboardLayoutSettings(): SettingsType;
    setKeyboardLayoutSettings(keyboardLayoutSettings: SettingsType): void;
    getLeftyFlipSettings(): SettingsType;
    setLeftyFlipSettings(leftyFlipSettings: SettingsType): void;
    getKeyboardLayoutSettings2(): SettingsType;
    setKeyboardLayoutSettings2(keyboardLayoutSettings2: SettingsType): void;
    getMomKillsCount(): number;
    setMomKillsCount(momKillsCount: number): void;
    getPoopDestoyedCount(): number;
    setPoopDestoyedCount(poopDestoyedCount: number): void;
    getDonationMachineUsageCount(): number;
    setDonationMachineUsageCount(donationMachineUsageCount: number): void;
    getDeathCardUsageCount(): number;
    setDeathCardUsageCount(deathCardUsageCount: number): void;
    getArcadeEntrancesCount(): number;
    setArcadeEntrancesCount(arcadeEntrancesCount: number): void;
    getBombsPlacedCount(): number;
    setBombsPlacedCount(bombsPlacedCount: number): void;
    getDeathsCount(): number;
    setDeathsCount(deathsCount: number): void;
    getRocksDestroyedCount(): number;
    setRocksDestroyedCount(rocksDestroyedCount: number): void;
    getXRocksDestoyedCount(): number;
    setXRocksDestoyedCount(xRocksDestoyedCount: number): void;
    getBossOfTheCathedralKillsCount(): number;
    setBossOfTheCathedralKillsCount(bossOfTheCathedralKillsCount: number): void;
    getItemsCollected(): ItemsCollected[];
    unlockItem(itemName: Collections, lock?: boolean): boolean;
    getSecretsUnlocked(): SecretsUnlocked[];
    unlockSecret(secretName: Secrets, lock?: boolean): boolean;
    getBossesKilled(): BossesKilled[];
    updateBossKillCount(bossName: Bosses, newCount: number): boolean;
    getMiniBossesKilled(): MiniBossesKilled[];
    updateMiniBossKillCount(miniBossName: MiniBosses, newCount: number): boolean;
    getFloorsCompleted(): FloorsCompleted[];
    updateFloorsCompletedCount(floorName: Floors, newCount: number): boolean;
    toString(): string;
}
